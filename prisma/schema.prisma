generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nome      String
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  deleted   Boolean  @default(false)
  profile   Profile?
}

model Empregado {
  id      Int      @id @default(autoincrement())
  nome    String
  pedidos Pedido[]
  deleted Boolean  @default(false)
}

model Cliente {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  nome      String
  email     String    @unique @db.VarChar(255)
  deleted   Boolean   @default(false)
  Reserva   Reserva[]
}

model Reserva {
  id            Int      @id @default(autoincrement())
  data          DateTime
  numeroPessoas Int
  nome          String
  emailId       String
  email         Cliente?  @relation(fields: [emailId], references: [email])
  deleted       Boolean  @default(false)
}

model Menu {
  id        Int        @id @default(autoincrement())
  nome      String
  preco     Float
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deleted   Boolean    @default(false)
  items     Produtos[]
}

model Produtos {
  id        Int     @id @default(autoincrement())
  nome      String
  descricao String?
  menuId    Int
  menu      Menu    @relation(fields: [menuId], references: [id])
  pedido    Pedido? @relation(fields: [pedidoId], references: [id])
  pedidoId  Int?
  deleted   Boolean @default(false)
}

model Mesa {
  id      Int      @id @default(autoincrement())
  numero  Int      @unique
  estado  String // Available, Occupied, Reserved
  Pedido  Pedido[]
  deleted Boolean  @default(false)
}

model Pedido {
  id        Int        @id @default(autoincrement())
  mesa      Mesa       @relation(fields: [mesaId], references: [id])
  mesaId    Int
  waiter    Empregado  @relation(fields: [waiterId], references: [id])
  waiterId  Int
  items     Produtos[]
  createdAt DateTime   @default(now())
  Invoice   Invoice[]
  deleted   Boolean    @default(false)
}

model Invoice {
  id            Int      @id @default(autoincrement())
  customerEmail String
  order         Pedido   @relation(fields: [orderId], references: [id])
  orderId       Int
  createdAt     DateTime @default(now())
}


model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String   @db.VarChar(255)
  lastName  String?  @db.VarChar(255)
  bio       String?  @db.Text()
  userId    String   @unique
  user      Admin    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
